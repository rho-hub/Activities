{"ast":null,"code":"export const getCurrentLocation = () => {\n  return new Promise((resolve, reject) => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => resolve({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      }), error => reject(error));\n    } else {\n      reject(new Error(\"Geolocation is not supported\"));\n    }\n  });\n};\nexport const fetchNearbyPlaces = (map, location) => {\n  return new Promise((resolve, reject) => {\n    if (!map || !window.google) return reject(\"Map not loaded\");\n    const service = new window.google.maps.places.PlacesService(map);\n    const request = {\n      location: new window.google.maps.LatLng(location.lat, location.lng),\n      radius: 5000,\n      type: ['park', 'tourist_attraction', 'amusement_park']\n    };\n    service.nearbySearch(request, (results, status) => {\n      if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n        resolve(results);\n      } else {\n        reject(status);\n      }\n    });\n  });\n};","map":{"version":3,"names":["getCurrentLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lng","longitude","error","Error","fetchNearbyPlaces","map","location","window","google","service","maps","places","PlacesService","request","LatLng","radius","type","nearbySearch","results","status","PlacesServiceStatus","OK"],"sources":["C:/Users/USER/Desktop/events-explorer/src/services/mapsService.js"],"sourcesContent":["export const getCurrentLocation = () => {\r\n  return new Promise((resolve, reject) => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        position => resolve({\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude\r\n        }),\r\n        error => reject(error)\r\n      );\r\n    } else {\r\n      reject(new Error(\"Geolocation is not supported\"));\r\n    }\r\n  });\r\n};\r\n\r\nexport const fetchNearbyPlaces = (map, location) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!map || !window.google) return reject(\"Map not loaded\");\r\n    \r\n    const service = new window.google.maps.places.PlacesService(map);\r\n    const request = {\r\n      location: new window.google.maps.LatLng(location.lat, location.lng),\r\n      radius: 5000,\r\n      type: ['park', 'tourist_attraction', 'amusement_park']\r\n    };\r\n\r\n    service.nearbySearch(request, (results, status) => {\r\n      if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n        resolve(results);\r\n      } else {\r\n        reject(status);\r\n      }\r\n    });\r\n  });\r\n};"],"mappings":"AAAA,OAAO,MAAMA,kBAAkB,GAAGA,CAAA,KAAM;EACtC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,IAAIC,SAAS,CAACC,WAAW,EAAE;MACzBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACtCC,QAAQ,IAAIL,OAAO,CAAC;QAClBM,GAAG,EAAED,QAAQ,CAACE,MAAM,CAACC,QAAQ;QAC7BC,GAAG,EAAEJ,QAAQ,CAACE,MAAM,CAACG;MACvB,CAAC,CAAC,EACFC,KAAK,IAAIV,MAAM,CAACU,KAAK,CACvB,CAAC;IACH,CAAC,MAAM;MACLV,MAAM,CAAC,IAAIW,KAAK,CAAC,8BAA8B,CAAC,CAAC;IACnD;EACF,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAGA,CAACC,GAAG,EAAEC,QAAQ,KAAK;EAClD,OAAO,IAAIhB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,IAAI,CAACa,GAAG,IAAI,CAACE,MAAM,CAACC,MAAM,EAAE,OAAOhB,MAAM,CAAC,gBAAgB,CAAC;IAE3D,MAAMiB,OAAO,GAAG,IAAIF,MAAM,CAACC,MAAM,CAACE,IAAI,CAACC,MAAM,CAACC,aAAa,CAACP,GAAG,CAAC;IAChE,MAAMQ,OAAO,GAAG;MACdP,QAAQ,EAAE,IAAIC,MAAM,CAACC,MAAM,CAACE,IAAI,CAACI,MAAM,CAACR,QAAQ,CAACT,GAAG,EAAES,QAAQ,CAACN,GAAG,CAAC;MACnEe,MAAM,EAAE,IAAI;MACZC,IAAI,EAAE,CAAC,MAAM,EAAE,oBAAoB,EAAE,gBAAgB;IACvD,CAAC;IAEDP,OAAO,CAACQ,YAAY,CAACJ,OAAO,EAAE,CAACK,OAAO,EAAEC,MAAM,KAAK;MACjD,IAAIA,MAAM,KAAKZ,MAAM,CAACC,MAAM,CAACE,IAAI,CAACC,MAAM,CAACS,mBAAmB,CAACC,EAAE,EAAE;QAC/D9B,OAAO,CAAC2B,OAAO,CAAC;MAClB,CAAC,MAAM;QACL1B,MAAM,CAAC2B,MAAM,CAAC;MAChB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}