{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\events-explorer\\\\src\\\\components\\\\Map\\\\MapContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { LoadScript, GoogleMap } from '@react-google-maps/api';\nimport MapMarkers from './MapMarkers';\nimport { mapContainerStyle, defaultMapOptions } from './MapUtils';\nimport { getCurrentLocation, fetchNearbyPlaces } from '../../services/mapsService';\nimport './Map.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapContainer = ({\n  events,\n  onPlacesLoaded\n}) => {\n  _s();\n  const [map, setMap] = useState(null);\n  const [userLocation, setUserLocation] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const initializeMap = async () => {\n      try {\n        const location = await getCurrentLocation();\n        setUserLocation(location);\n        if (map) {\n          const places = await fetchNearbyPlaces(map, location);\n          onPlacesLoaded(places);\n        }\n      } catch (err) {\n        setError(err.message);\n        // Default to New York if location fails\n        setUserLocation({\n          lat: 40.7128,\n          lng: -74.0060\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeMap();\n  }, [map, onPlacesLoaded]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading map...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n      libraries: ['places'],\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: mapContainerStyle,\n        center: userLocation,\n        zoom: 13,\n        options: defaultMapOptions,\n        onLoad: map => setMap(map),\n        children: /*#__PURE__*/_jsxDEV(MapMarkers, {\n          map: map,\n          userLocation: userLocation,\n          events: events\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(MapContainer, \"5dZFDVyBuDcZ8MZQAPThDobTXs0=\");\n_c = MapContainer;\nexport default MapContainer;\nvar _c;\n$RefreshReg$(_c, \"MapContainer\");","map":{"version":3,"names":["React","useState","useEffect","LoadScript","GoogleMap","MapMarkers","mapContainerStyle","defaultMapOptions","getCurrentLocation","fetchNearbyPlaces","jsxDEV","_jsxDEV","MapContainer","events","onPlacesLoaded","_s","map","setMap","userLocation","setUserLocation","loading","setLoading","error","setError","initializeMap","location","places","err","message","lat","lng","className","children","fileName","_jsxFileName","lineNumber","columnNumber","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","libraries","center","zoom","options","onLoad","_c","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/events-explorer/src/components/Map/MapContainer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { LoadScript, GoogleMap } from '@react-google-maps/api';\r\nimport MapMarkers from './MapMarkers';\r\nimport { mapContainerStyle, defaultMapOptions } from './MapUtils';\r\nimport { getCurrentLocation, fetchNearbyPlaces } from '../../services/mapsService';\r\nimport './Map.css';\r\n\r\nconst MapContainer = ({ events, onPlacesLoaded }) => {\r\n  const [map, setMap] = useState(null);\r\n  const [userLocation, setUserLocation] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const initializeMap = async () => {\r\n      try {\r\n        const location = await getCurrentLocation();\r\n        setUserLocation(location);\r\n        \r\n        if (map) {\r\n          const places = await fetchNearbyPlaces(map, location);\r\n          onPlacesLoaded(places);\r\n        }\r\n      } catch (err) {\r\n        setError(err.message);\r\n        // Default to New York if location fails\r\n        setUserLocation({ lat: 40.7128, lng: -74.0060 });\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    initializeMap();\r\n  }, [map, onPlacesLoaded]);\r\n\r\n  if (loading) return <div className=\"loading\">Loading map...</div>;\r\n  if (error) return <div className=\"error\">{error}</div>;\r\n\r\n  return (\r\n    <div className=\"map-container\">\r\n      <LoadScript\r\n        googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY}\r\n        libraries={['places']}\r\n      >\r\n        <GoogleMap\r\n          mapContainerStyle={mapContainerStyle}\r\n          center={userLocation}\r\n          zoom={13}\r\n          options={defaultMapOptions}\r\n          onLoad={map => setMap(map)}\r\n        >\r\n          <MapMarkers \r\n            map={map} \r\n            userLocation={userLocation} \r\n            events={events} \r\n          />\r\n        </GoogleMap>\r\n      </LoadScript>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapContainer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}