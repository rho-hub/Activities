{"ast":null,"code":"import axios from 'axios';\n\n// Mock data for development\nconst mockEvents = [{\n  id: 1,\n  name: \"Summer Music Festival\",\n  location: \"Central Park\",\n  date: \"May 15, 2024\",\n  time: \"4:00 PM - 10:00 PM\",\n  latitude: 40.7829,\n  longitude: -73.9654,\n  rating: 4.7,\n  reviewCount: 128\n}, {\n  id: 2,\n  name: \"Aqua Adventure\",\n  location: \"Wildlife Sanctuary\",\n  date: \"June 10, 2024\",\n  time: \"10:00 AM - 6:00 PM\",\n  latitude: 40.7855,\n  longitude: -73.9588,\n  rating: 4.5,\n  reviewCount: 95\n}];\nexport const fetchEvents = async () => {\n  try {\n    // Try real API first\n    const response = await axios.get('https://events-api-ydqd.onrender.com/api/events');\n    return response.data || mockEvents; // Fallback to mock if empty\n  } catch (error) {\n    console.error('Using mock data due to API error:', error);\n    return mockEvents; // Fallback to mock data\n  }\n};","map":{"version":3,"names":["axios","mockEvents","id","name","location","date","time","latitude","longitude","rating","reviewCount","fetchEvents","response","get","data","error","console"],"sources":["C:/Users/USER/Desktop/events-explorer/src/services/eventsService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Mock data for development\r\nconst mockEvents = [\r\n  {\r\n    id: 1,\r\n    name: \"Summer Music Festival\",\r\n    location: \"Central Park\",\r\n    date: \"May 15, 2024\",\r\n    time: \"4:00 PM - 10:00 PM\",\r\n    latitude: 40.7829,\r\n    longitude: -73.9654,\r\n    rating: 4.7,\r\n    reviewCount: 128\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Aqua Adventure\",\r\n    location: \"Wildlife Sanctuary\",\r\n    date: \"June 10, 2024\",\r\n    time: \"10:00 AM - 6:00 PM\",\r\n    latitude: 40.7855,\r\n    longitude: -73.9588,\r\n    rating: 4.5,\r\n    reviewCount: 95\r\n  }\r\n];\r\n\r\nexport const fetchEvents = async () => {\r\n  try {\r\n    // Try real API first\r\n    const response = await axios.get('https://events-api-ydqd.onrender.com/api/events');\r\n    return response.data || mockEvents; // Fallback to mock if empty\r\n  } catch (error) {\r\n    console.error('Using mock data due to API error:', error);\r\n    return mockEvents; // Fallback to mock data\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,UAAU,GAAG,CACjB;EACEC,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,uBAAuB;EAC7BC,QAAQ,EAAE,cAAc;EACxBC,IAAI,EAAE,cAAc;EACpBC,IAAI,EAAE,oBAAoB;EAC1BC,QAAQ,EAAE,OAAO;EACjBC,SAAS,EAAE,CAAC,OAAO;EACnBC,MAAM,EAAE,GAAG;EACXC,WAAW,EAAE;AACf,CAAC,EACD;EACER,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,gBAAgB;EACtBC,QAAQ,EAAE,oBAAoB;EAC9BC,IAAI,EAAE,eAAe;EACrBC,IAAI,EAAE,oBAAoB;EAC1BC,QAAQ,EAAE,OAAO;EACjBC,SAAS,EAAE,CAAC,OAAO;EACnBC,MAAM,EAAE,GAAG;EACXC,WAAW,EAAE;AACf,CAAC,CACF;AAED,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,iDAAiD,CAAC;IACnF,OAAOD,QAAQ,CAACE,IAAI,IAAIb,UAAU,CAAC,CAAC;EACtC,CAAC,CAAC,OAAOc,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,OAAOd,UAAU,CAAC,CAAC;EACrB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}