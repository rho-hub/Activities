{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\events-explorer\\\\src\\\\components\\\\Map\\\\MapContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { LoadScript, GoogleMap, Marker, InfoWindow } from '@react-google-maps/api';\nimport { getCurrentLocation } from '../../services/mapsService';\nimport './Map.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapContainerStyle = {\n  width: '100%',\n  height: '100%'\n};\nconst defaultMapOptions = {\n  disableDefaultUI: true,\n  zoomControl: true\n};\nconst MapContainer = ({\n  events,\n  places,\n  onUserLocation,\n  onPlacesLoaded\n}) => {\n  _s();\n  const [map, setMap] = useState(null);\n  const [selectedMarker, setSelectedMarker] = useState(null);\n  const [mapError, setMapError] = useState(null);\n  useEffect(() => {\n    const initMap = async () => {\n      try {\n        const location = await getCurrentLocation();\n        onUserLocation(location);\n      } catch (error) {\n        setMapError(\"Couldn't get your location. Defaulting to New York.\");\n        onUserLocation({\n          lat: 40.7128,\n          lng: -74.0060\n        });\n      }\n    };\n    initMap();\n  }, [onUserLocation]);\n  useEffect(() => {\n    if (map && userLocation) {\n      const service = new window.google.maps.places.PlacesService(map);\n      const request = {\n        location: new window.google.maps.LatLng(userLocation.lat, userLocation.lng),\n        radius: 5000,\n        type: ['park', 'tourist_attraction']\n      };\n      service.nearbySearch(request, (results, status) => {\n        if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n          onPlacesLoaded(results);\n        }\n      });\n    }\n  }, [map, userLocation, onPlacesLoaded]);\n  if (mapError) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-error\",\n    children: mapError\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 24\n  }, this);\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    libraries: ['places'],\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainerStyle,\n      center: userLocation,\n      zoom: 13,\n      options: defaultMapOptions,\n      onLoad: map => setMap(map),\n      children: [userLocation && /*#__PURE__*/_jsxDEV(Marker, {\n        position: userLocation,\n        icon: {\n          url: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), events.map(event => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: event.latitude,\n          lng: event.longitude\n        },\n        onClick: () => setSelectedMarker(event),\n        icon: {\n          url: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n        }\n      }, `event-${event.id}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)), places.map(place => /*#__PURE__*/_jsxDEV(Marker, {\n        position: place.geometry.location,\n        onClick: () => setSelectedMarker(place),\n        icon: {\n          url: 'http://maps.google.com/mapfiles/ms/icons/green-dot.png'\n        }\n      }, `place-${place.place_id}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)), selectedMarker && /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: selectedMarker.geometry ? selectedMarker.geometry.location : {\n          lat: selectedMarker.latitude,\n          lng: selectedMarker.longitude\n        },\n        onCloseClick: () => setSelectedMarker(null),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: selectedMarker.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: selectedMarker.vicinity || selectedMarker.location\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this), selectedMarker.rating && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Rating: \", selectedMarker.rating]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(MapContainer, \"pWTSQVmwGkRnsS19fWVoSv9X7nA=\");\n_c = MapContainer;\nexport default MapContainer;\nvar _c;\n$RefreshReg$(_c, \"MapContainer\");","map":{"version":3,"names":["React","useState","useEffect","LoadScript","GoogleMap","Marker","InfoWindow","getCurrentLocation","jsxDEV","_jsxDEV","mapContainerStyle","width","height","defaultMapOptions","disableDefaultUI","zoomControl","MapContainer","events","places","onUserLocation","onPlacesLoaded","_s","map","setMap","selectedMarker","setSelectedMarker","mapError","setMapError","initMap","location","error","lat","lng","userLocation","service","window","google","maps","PlacesService","request","LatLng","radius","type","nearbySearch","results","status","PlacesServiceStatus","OK","className","children","fileName","_jsxFileName","lineNumber","columnNumber","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","libraries","center","zoom","options","onLoad","position","icon","url","event","latitude","longitude","onClick","id","place","geometry","place_id","onCloseClick","name","vicinity","rating","_c","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/events-explorer/src/components/Map/MapContainer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { LoadScript, GoogleMap, Marker, InfoWindow } from '@react-google-maps/api';\r\nimport { getCurrentLocation } from '../../services/mapsService';\r\nimport './Map.css';\r\n\r\nconst mapContainerStyle = {\r\n  width: '100%',\r\n  height: '100%'\r\n};\r\n\r\nconst defaultMapOptions = {\r\n  disableDefaultUI: true,\r\n  zoomControl: true,\r\n};\r\n\r\nconst MapContainer = ({ events, places, onUserLocation, onPlacesLoaded }) => {\r\n  const [map, setMap] = useState(null);\r\n  const [selectedMarker, setSelectedMarker] = useState(null);\r\n  const [mapError, setMapError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const initMap = async () => {\r\n      try {\r\n        const location = await getCurrentLocation();\r\n        onUserLocation(location);\r\n      } catch (error) {\r\n        setMapError(\"Couldn't get your location. Defaulting to New York.\");\r\n        onUserLocation({ lat: 40.7128, lng: -74.0060 });\r\n      }\r\n    };\r\n    initMap();\r\n  }, [onUserLocation]);\r\n\r\n  useEffect(() => {\r\n    if (map && userLocation) {\r\n      const service = new window.google.maps.places.PlacesService(map);\r\n      const request = {\r\n        location: new window.google.maps.LatLng(userLocation.lat, userLocation.lng),\r\n        radius: 5000,\r\n        type: ['park', 'tourist_attraction']\r\n      };\r\n\r\n      service.nearbySearch(request, (results, status) => {\r\n        if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n          onPlacesLoaded(results);\r\n        }\r\n      });\r\n    }\r\n  }, [map, userLocation, onPlacesLoaded]);\r\n\r\n  if (mapError) return <div className=\"map-error\">{mapError}</div>;\r\n\r\n  return (\r\n    <LoadScript\r\n      googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY}\r\n      libraries={['places']}\r\n    >\r\n      <GoogleMap\r\n        mapContainerStyle={mapContainerStyle}\r\n        center={userLocation}\r\n        zoom={13}\r\n        options={defaultMapOptions}\r\n        onLoad={map => setMap(map)}\r\n      >\r\n        {/* User Location Marker */}\r\n        {userLocation && (\r\n          <Marker\r\n            position={userLocation}\r\n            icon={{\r\n              url: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\r\n            }}\r\n          />\r\n        )}\r\n\r\n        {/* Event Markers */}\r\n        {events.map(event => (\r\n          <Marker\r\n            key={`event-${event.id}`}\r\n            position={{ lat: event.latitude, lng: event.longitude }}\r\n            onClick={() => setSelectedMarker(event)}\r\n            icon={{\r\n              url: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\r\n            }}\r\n          />\r\n        ))}\r\n\r\n        {/* Place Markers */}\r\n        {places.map(place => (\r\n          <Marker\r\n            key={`place-${place.place_id}`}\r\n            position={place.geometry.location}\r\n            onClick={() => setSelectedMarker(place)}\r\n            icon={{\r\n              url: 'http://maps.google.com/mapfiles/ms/icons/green-dot.png'\r\n            }}\r\n          />\r\n        ))}\r\n\r\n        {/* Info Window */}\r\n        {selectedMarker && (\r\n          <InfoWindow\r\n            position={\r\n              selectedMarker.geometry \r\n                ? selectedMarker.geometry.location \r\n                : { lat: selectedMarker.latitude, lng: selectedMarker.longitude }\r\n            }\r\n            onCloseClick={() => setSelectedMarker(null)}\r\n          >\r\n            <div>\r\n              <h3>{selectedMarker.name}</h3>\r\n              <p>{selectedMarker.vicinity || selectedMarker.location}</p>\r\n              {selectedMarker.rating && (\r\n                <p>Rating: {selectedMarker.rating}</p>\r\n              )}\r\n            </div>\r\n          </InfoWindow>\r\n        )}\r\n      </GoogleMap>\r\n    </LoadScript>\r\n  );\r\n};\r\n\r\nexport default MapContainer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}