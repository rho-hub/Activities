{"ast":null,"code":"export const getCurrentLocation=()=>{return new Promise((resolve,reject)=>{if(!navigator.geolocation){reject(new Error(\"Geolocation not supported\"));return;}const options={enableHighAccuracy:true,timeout:5000,maximumAge:0};navigator.geolocation.getCurrentPosition(position=>resolve({lat:position.coords.latitude,lng:position.coords.longitude,accuracy:position.coords.accuracy}),error=>{console.warn(`Geolocation error (${error.code}): ${error.message}`);// Fallback to IP-based location\nfetch('https://ipapi.co/json/').then(res=>res.json()).then(data=>{if(data.latitude&&data.longitude){resolve({lat:parseFloat(data.latitude),lng:parseFloat(data.longitude),accuracy:5000// Approximate accuracy for IP-based location\n});}else{reject(error);// Fallback failed\n}}).catch(()=>reject(error));},options);});};export const fetchNearbyPlaces=(map,location)=>{return new Promise((resolve,reject)=>{if(!map||!window.google)return reject(\"Map not loaded\");const service=new window.google.maps.places.PlacesService(map);const request={location:new window.google.maps.LatLng(location.lat,location.lng),radius:5000,type:['park','tourist_attraction','amusement_park']};service.nearbySearch(request,(results,status)=>{if(status===window.google.maps.places.PlacesServiceStatus.OK){resolve(results);}else{reject(status);}});});};","map":{"version":3,"names":["getCurrentLocation","Promise","resolve","reject","navigator","geolocation","Error","options","enableHighAccuracy","timeout","maximumAge","getCurrentPosition","position","lat","coords","latitude","lng","longitude","accuracy","error","console","warn","code","message","fetch","then","res","json","data","parseFloat","catch","fetchNearbyPlaces","map","location","window","google","service","maps","places","PlacesService","request","LatLng","radius","type","nearbySearch","results","status","PlacesServiceStatus","OK"],"sources":["C:/Users/USER/Desktop/events-explorer/src/services/mapsService.js"],"sourcesContent":["export const getCurrentLocation = () => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!navigator.geolocation) {\r\n      reject(new Error(\"Geolocation not supported\"));\r\n      return;\r\n    }\r\n\r\n    const options = {\r\n      enableHighAccuracy: true,\r\n      timeout: 5000,\r\n      maximumAge: 0\r\n    };\r\n\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => resolve({\r\n        lat: position.coords.latitude,\r\n        lng: position.coords.longitude,\r\n        accuracy: position.coords.accuracy\r\n      }),\r\n      (error) => {\r\n        console.warn(`Geolocation error (${error.code}): ${error.message}`);\r\n        // Fallback to IP-based location\r\n        fetch('https://ipapi.co/json/')\r\n          .then(res => res.json())\r\n          .then(data => {\r\n            if (data.latitude && data.longitude) {\r\n              resolve({\r\n                lat: parseFloat(data.latitude),\r\n                lng: parseFloat(data.longitude),\r\n                accuracy: 5000 // Approximate accuracy for IP-based location\r\n              });\r\n            } else {\r\n              reject(error); // Fallback failed\r\n            }\r\n          })\r\n          .catch(() => reject(error));\r\n      },\r\n      options\r\n    );\r\n  });\r\n};\r\n\r\nexport const fetchNearbyPlaces = (map, location) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!map || !window.google) return reject(\"Map not loaded\");\r\n    \r\n    const service = new window.google.maps.places.PlacesService(map);\r\n    const request = {\r\n      location: new window.google.maps.LatLng(location.lat, location.lng),\r\n      radius: 5000,\r\n      type: ['park', 'tourist_attraction', 'amusement_park']\r\n    };\r\n\r\n    service.nearbySearch(request, (results, status) => {\r\n      if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n        resolve(results);\r\n      } else {\r\n        reject(status);\r\n      }\r\n    });\r\n  });\r\n};"],"mappings":"AAAA,MAAO,MAAM,CAAAA,kBAAkB,CAAGA,CAAA,GAAM,CACtC,MAAO,IAAI,CAAAC,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAK,CACtC,GAAI,CAACC,SAAS,CAACC,WAAW,CAAE,CAC1BF,MAAM,CAAC,GAAI,CAAAG,KAAK,CAAC,2BAA2B,CAAC,CAAC,CAC9C,OACF,CAEA,KAAM,CAAAC,OAAO,CAAG,CACdC,kBAAkB,CAAE,IAAI,CACxBC,OAAO,CAAE,IAAI,CACbC,UAAU,CAAE,CACd,CAAC,CAEDN,SAAS,CAACC,WAAW,CAACM,kBAAkB,CACrCC,QAAQ,EAAKV,OAAO,CAAC,CACpBW,GAAG,CAAED,QAAQ,CAACE,MAAM,CAACC,QAAQ,CAC7BC,GAAG,CAAEJ,QAAQ,CAACE,MAAM,CAACG,SAAS,CAC9BC,QAAQ,CAAEN,QAAQ,CAACE,MAAM,CAACI,QAC5B,CAAC,CAAC,CACDC,KAAK,EAAK,CACTC,OAAO,CAACC,IAAI,CAAC,sBAAsBF,KAAK,CAACG,IAAI,MAAMH,KAAK,CAACI,OAAO,EAAE,CAAC,CACnE;AACAC,KAAK,CAAC,wBAAwB,CAAC,CAC5BC,IAAI,CAACC,GAAG,EAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,EAAI,CACZ,GAAIA,IAAI,CAACb,QAAQ,EAAIa,IAAI,CAACX,SAAS,CAAE,CACnCf,OAAO,CAAC,CACNW,GAAG,CAAEgB,UAAU,CAACD,IAAI,CAACb,QAAQ,CAAC,CAC9BC,GAAG,CAAEa,UAAU,CAACD,IAAI,CAACX,SAAS,CAAC,CAC/BC,QAAQ,CAAE,IAAK;AACjB,CAAC,CAAC,CACJ,CAAC,IAAM,CACLf,MAAM,CAACgB,KAAK,CAAC,CAAE;AACjB,CACF,CAAC,CAAC,CACDW,KAAK,CAAC,IAAM3B,MAAM,CAACgB,KAAK,CAAC,CAAC,CAC/B,CAAC,CACDZ,OACF,CAAC,CACH,CAAC,CAAC,CACJ,CAAC,CAED,MAAO,MAAM,CAAAwB,iBAAiB,CAAGA,CAACC,GAAG,CAAEC,QAAQ,GAAK,CAClD,MAAO,IAAI,CAAAhC,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAK,CACtC,GAAI,CAAC6B,GAAG,EAAI,CAACE,MAAM,CAACC,MAAM,CAAE,MAAO,CAAAhC,MAAM,CAAC,gBAAgB,CAAC,CAE3D,KAAM,CAAAiC,OAAO,CAAG,GAAI,CAAAF,MAAM,CAACC,MAAM,CAACE,IAAI,CAACC,MAAM,CAACC,aAAa,CAACP,GAAG,CAAC,CAChE,KAAM,CAAAQ,OAAO,CAAG,CACdP,QAAQ,CAAE,GAAI,CAAAC,MAAM,CAACC,MAAM,CAACE,IAAI,CAACI,MAAM,CAACR,QAAQ,CAACpB,GAAG,CAAEoB,QAAQ,CAACjB,GAAG,CAAC,CACnE0B,MAAM,CAAE,IAAI,CACZC,IAAI,CAAE,CAAC,MAAM,CAAE,oBAAoB,CAAE,gBAAgB,CACvD,CAAC,CAEDP,OAAO,CAACQ,YAAY,CAACJ,OAAO,CAAE,CAACK,OAAO,CAAEC,MAAM,GAAK,CACjD,GAAIA,MAAM,GAAKZ,MAAM,CAACC,MAAM,CAACE,IAAI,CAACC,MAAM,CAACS,mBAAmB,CAACC,EAAE,CAAE,CAC/D9C,OAAO,CAAC2C,OAAO,CAAC,CAClB,CAAC,IAAM,CACL1C,MAAM,CAAC2C,MAAM,CAAC,CAChB,CACF,CAAC,CAAC,CACJ,CAAC,CAAC,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}